spring boot所具备的特征有：
（1）可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；
（2）内嵌Tomcat或Jetty等Servlet容器；
（3）提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；
（4）尽可能自动配置Spring容器；
（5）提供准备好的特性，如指标、健康检查和外部化配置；
（6）绝对没有代码生成，不需要XML配置

在html中定义头部：xmlns:th="http://www.thymeleaf.org"

基本配置需要引入的组件
1.devtools
2.mybatis
3.thymeleaf
4.mysql driver
5.spring web

配置springboot数据源连接的内容
spring.datasource.url=jdbc:mysql://localhost:3306/ykaoshi?useUnicode=true&characterEncoding=utf-8&allowMutilQueries=true&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=123456
#加载mybatisconfig配置文件 classpath：代表编译后的根路径
mybatis.config-location=classpath:mybatis-config.xml
#加载mapper配置文件，因为默认是加载mapper接口同级目录配置文件
mybatis.mapper-locations=classpath:mapper/*.xml
#改变端口
server.port=999
#配置项目名称
service.servlet.context.cath=/xx
#日志文件
logging.level.root=debug
logging.level.com.accp.mapper=debug

spring.thymeleaf.prefix=classpath:templates

#在启动类中
@MapperScan("com.accp.mapper")

#循环
th:each="item,index : ${stus.list}"

路径定义:
th：src="@{/路径地址}"

获取函数:${}

参数处理:
th:href="@{/student/delete}+'?id='+${item.id}+'&name='+${item.name}"
th:href="@{/student/delete(id=${item.id},.....)}"

js路径处理:
var url="[[@{/student/find}]]"


第二次课
@Configuration:表示为配置类
WebMvcConfigurationSupport:mvc配置类
	注意：继承该类后会覆盖原有的静态资源配置，必须重新配置
	重写addResourceHandler配置静态资源目录
	重写addCorsMappings：配置跨域
	重写addInterceptors:添加拦截器

springboot跨域后在前台ajax请求中增加：
	xhrFields:{
		withCredentials:true
	}
将数据保存在浏览器的session存储对象中，对象转型成字符串
sessionStorage.setItem("user",JSON.stringify(respones.user));


git:项目管理工具：项目版本控制器
	git分为工作区区，暂存区，版本库
git操作：
git init：初始化git本地仓库
git add *：将文件添加到暂存区
git commit：提交暂存区的文件到版本库中
git commit -m:提交的内容git描述
配置git本机账户
git config--global user.eamil"邮箱地址"
git config--global user.name"账户名称"
查询git配置信息:
git config --list
git log:查询仓库提交记录